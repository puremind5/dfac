import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { Trash as Treasure } from 'lucide-react';
import GameBoard2 from './components/GameBoard2';
import BankGame from './BankGame';
import ThreePlayersGame from './ThreePlayersGame';
import MultiplayerGame from './MultiplayerGame';
import Players from './components/Players';
import WelcomePage from './components/WelcomePage';
import TradingPage from './components/TradingPage';
import axios from 'axios';
import './App.css';

const CHEST_VALUES = { 1: 35, 2: 50, 3: 70, 4: 100 };
const GAME_COST = 25; // üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
const BANK_THRESHOLD = 100; // üìå –ü–æ—Ä–æ–≥ –±–∞–Ω–∫–∞ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞

function App() {
  const [results, setResults] = useState<any>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [gameActive, setGameActive] = useState<boolean>(true);
  const [bank, setBank] = useState<number>(0); // üåü –ë–ê–ù–ö
  const [lastBankAddition, setLastBankAddition] = useState<number | null>(null); // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–∞
  const [winStreak, setWinStreak] = useState<{ [key: string]: number }>({
    You: 0,
    "–ê–ª–∏—Å–∞": 0,
    "–û–ª–µ–≥": 0,
    "–°–∏—Ä–∏": 0,
  });

  // üåü –ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–æ–≤
  const [totalGold, setTotalGold] = useState<{ [key: string]: number }>({
    You: 100,
    "–ê–ª–∏—Å–∞": 100,
    "–û–ª–µ–≥": 100,
    "–°–∏—Ä–∏": 100,
  });

  // –¢–∏–ø –∏–≥—Ä—ã (—Ç–µ–ø–µ—Ä—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'multiplayer')
  const [gameVersion, setGameVersion] = useState<'original' | 'bank' | 'three-players' | 'multiplayer'>('multiplayer');
  const [timeLeft, setTimeLeft] = useState(7); // –ò–∑–º–µ–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å 10 –Ω–∞ 7 —Å–µ–∫—É–Ω–¥
  const [playersMadeChoice, setPlayersMadeChoice] = useState<Record<string, boolean>>({
    'You': false,
    '–ê–ª–∏—Å–∞': false,
    '–û–ª–µ–≥': false,
    '–°–∏—Ä–∏': false
  });

  const [playerChoice, setPlayerChoice] = useState<number | null>(null);
  const [resultsReady, setResultsReady] = useState(false); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
  const [visiblePlayers, setVisiblePlayers] = useState<string[]>([]);
  const [resultTimeLeft, setResultTimeLeft] = useState<number | null>(null);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–∞
  const [bankUpdateVisible, setBankUpdateVisible] = useState<boolean>(false);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–Ω–∫–∞ (–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è)
  const [prevBankValue, setPrevBankValue] = useState<number>(0);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ä–≤–∞–ª –±–∞–Ω–∫, –∏ —Å—É–º–º—ã –≤—ã–∏–≥—Ä—ã—à–∞
  const [bankJackpot, setBankJackpot] = useState<{player: string, amount: number} | null>(null);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º–µ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
  useEffect(() => {
    let timer: NodeJS.Timeout;
    if (gameActive && timeLeft > 0) {
      timer = setInterval(() => {
        setTimeLeft(prev => Math.max(prev - 1, 0));
      }, 1000);
    } else if (timeLeft === 0 && gameActive) {
      // –ö–æ–≥–¥–∞ —Ç–∞–π–º–µ—Ä –¥–æ—Å—Ç–∏–≥ 0, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—É–Ω–¥
      setGameActive(false);
      
      // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å —ç—Ç–∏–º –≤—ã–±–æ—Ä–æ–º
      // –ò–Ω–∞—á–µ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—É–Ω–¥—É–∫ –¥–ª—è –∏–≥—Ä–æ–∫–∞
      if (playerChoice !== null) {
        console.log('–¢–∞–π–º–µ—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—É–Ω–¥ —Å –≤—ã–±–æ—Ä–æ–º –∏–≥—Ä–æ–∫–∞:', playerChoice);
        finishRound(playerChoice);
      } else {
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—É–Ω–¥—É–∫ –¥–ª—è –∏–≥—Ä–æ–∫–∞
        const randomChest = Math.floor(Math.random() * 4) + 1;
        console.log('–¢–∞–π–º–µ—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º —Å—É–Ω–¥—É–∫:', randomChest);
        setPlayerChoice(randomChest);
        finishRound(randomChest);
      }
    }
    
    return () => clearInterval(timer);
  }, [gameActive, timeLeft, playerChoice]);

  const handleChestSelect = (chestIndex: number) => {
    if (!gameActive) return;
    
    console.log('–ò–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª —Å—É–Ω–¥—É–∫:', chestIndex);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞
    setPlayerChoice(chestIndex);
    
    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä
    setPlayersMadeChoice(prev => ({
      ...prev,
      'You': true
    }));

    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞,
    // —Ç–µ–ø–µ—Ä—å –º—ã –≤—Å–µ–≥–¥–∞ –¥–æ–∂–∏–¥–∞–µ–º—Å—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
  const determineWinner = (playerChoice: number, botChoices: number[], reward: number): { winner: string, reward: number } => {
    // –¶–µ–Ω–Ω–æ—Å—Ç—å —Å—É–Ω–¥—É–∫–æ–≤ (–∏–Ω–¥–µ–∫—Å + 1 = –Ω–æ–º–µ—Ä —Å—É–Ω–¥—É–∫–∞)
    const chestValues = [35, 50, 70, 100];
    
    // –ò–º–µ–Ω–∞ –±–æ—Ç–æ–≤
    const botNames = ['–ê–ª–∏—Å–∞', '–û–ª–µ–≥', '–°–∏—Ä–∏'];
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤—ã–±–æ—Ä—ã –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤
    const allChoices = [...botChoices];
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç, –≥–¥–µ –∫–ª—é—á - –Ω–æ–º–µ—Ä —Å—É–Ω–¥—É–∫–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - –º–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤, –≤—ã–±—Ä–∞–≤—à–∏—Ö —ç—Ç–æ—Ç —Å—É–Ω–¥—É–∫
    const choiceMap: Record<number, string[]> = {
      1: [],
      2: [],
      3: [],
      4: []
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞
    choiceMap[playerChoice].push('You');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä—ã –±–æ—Ç–æ–≤
    botChoices.forEach((choice, index) => {
      choiceMap[choice].push(botNames[index]);
    });
    
    console.log('–ö–∞—Ä—Ç–∞ –≤—ã–±–æ—Ä–æ–≤:', choiceMap);
    
    // –ù–∞—Ö–æ–¥–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—ã–±–æ—Ä—ã (—Å—É–Ω–¥—É–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±—Ä–∞–ª —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–≥—Ä–æ–∫)
    const uniqueChoices: {chest: number, player: string, value: number}[] = [];
    
    Object.entries(choiceMap).forEach(([chest, players]) => {
      const chestNumber = parseInt(chest);
      if (players.length === 1) {
        // –≠—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä
        uniqueChoices.push({
          chest: chestNumber,
          player: players[0],
          value: chestValues[chestNumber - 1]
        });
      }
    });
    
    console.log('–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—ã–±–æ—Ä—ã:', uniqueChoices);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—ã–±–æ—Ä—ã, –Ω–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π —Ü–µ–Ω–Ω—ã–π
    if (uniqueChoices.length > 0) {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ü–µ–Ω–Ω–æ—Å—Ç–∏
      uniqueChoices.sort((a, b) => b.value - a.value);
      
      const winner = uniqueChoices[0];
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–≥—Ä–æ–∫–∞ —Å —Å–∞–º—ã–º —Ü–µ–Ω–Ω—ã–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –∏ –Ω–∞–≥—Ä–∞–¥—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å—É–Ω–¥—É–∫—É
      console.log('–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:', winner.player, '—Å —Å—É–Ω–¥—É–∫–æ–º', winner.chest, '(', winner.value, '–∑–æ–ª–æ—Ç–∞)');
      return { 
        winner: winner.player, 
        reward: winner.value // –ù–∞–≥—Ä–∞–¥–∞ —Ä–∞–≤–Ω–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—É–Ω–¥—É–∫–∞
      };
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤, –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç
    console.log('–ù–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤, –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è');
    return { winner: 'No winner', reward: 0 };
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–Ω–∫ –∏ –∑–æ–ª–æ—Ç–æ
  const updateBankAndGold = (winner: string, reward: number) => {
    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–Ω–∫–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    setPrevBankValue(bank);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–º—É –Ω–∞–≥—Ä–∞–¥—É
    if (winner !== 'No winner') {
      setTotalGold(prev => ({
        ...prev,
        [winner]: prev[winner] + reward
      }));
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Ä–∞–∑—ã–≥—Ä–∞–Ω–Ω–æ–µ –∑–æ–ª–æ—Ç–æ –≤ –±–∞–Ω–∫
    if (winner === 'No winner') {
      const addition = GAME_COST * 4; // –í—Å–µ 4 –∏–≥—Ä–æ–∫–∞ –∑–∞–ø–ª–∞—Ç–∏–ª–∏, –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª
      setBank(prev => prev + addition);
      setLastBankAddition(addition);
    } else {
      const addition = GAME_COST * 4 - reward; // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –ø–ª–∞—Ç–æ–π –∏ –Ω–∞–≥—Ä–∞–¥–æ–π
      setBank(prev => prev + addition);
      setLastBankAddition(addition);
    }
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏–∏ –ø–æ–±–µ–¥
  const updateWinStreaks = (winner: string) => {
    if (winner !== 'No winner') {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–µ—Ä–∏—é –ø–æ–±–µ–¥ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      setWinStreak(prev => ({
        ...prev,
        [winner]: prev[winner] + 1
      }));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏–∏ –ø–æ–±–µ–¥ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö
      setWinStreak(prev => {
        const newStreak = { ...prev };
        Object.keys(newStreak).forEach(player => {
          if (player !== winner) {
            newStreak[player] = 0;
          }
        });
        return newStreak;
      });
      
      // –ï—Å–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –≤—ã–∏–≥—Ä–∞–ª 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥ –∏ –±–∞–Ω–∫ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π
      if (winStreak[winner] + 1 >= 3 && bank >= BANK_THRESHOLD) {
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, –∫—Ç–æ —Å–æ—Ä–≤–∞–ª –±–∞–Ω–∫ –∏ —Å–∫–æ–ª—å–∫–æ –≤—ã–∏–≥—Ä–∞–ª
        setBankJackpot({player: winner, amount: bank});
        
        // –í—ã–ø–ª–∞—á–∏–≤–∞–µ–º –±–∞–Ω–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
        setTotalGold(prev => ({
          ...prev,
          [winner]: prev[winner] + bank
        }));
        setBank(0); // –û–±–Ω—É–ª—è–µ–º –±–∞–Ω–∫
      }
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –≤—Å–µ —Å–µ—Ä–∏–∏ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è
      setWinStreak({
        'You': 0,
        '–ê–ª–∏—Å–∞': 0,
        '–û–ª–µ–≥': 0,
        '–°–∏—Ä–∏': 0
      });
    }
  };

  // –í—ã–Ω–µ—Å–µ–º –ª–æ–≥–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
  const finishRound = (chestIndex: number) => {
    console.log('–§—É–Ω–∫—Ü–∏—è finishRound –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ');
    try {
      setLoading(true);
      setError(null);
      setGameActive(false);
      setResultsReady(true); // –°—Ä–∞–∑—É –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–∞
      setVisiblePlayers([]);
      setBankUpdateVisible(false);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const botChoices = [
        Math.floor(Math.random() * 4) + 1,
        Math.floor(Math.random() * 4) + 1,
        Math.floor(Math.random() * 4) + 1
      ];
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—É–Ω–¥—É–∫–∞
      const chestValues = [35, 50, 70, 100];
      const reward = chestValues[chestIndex - 1];
      
      console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã:', { playerChoice: chestIndex, botChoices, reward });
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      const { winner, reward: determinedReward } = determineWinner(chestIndex, botChoices, reward);
      console.log('–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å:', winner);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const results = {
        winner,
        reward: determinedReward,
        playerChoice: chestIndex,
        botChoices,
        botNames: ['–ê–ª–∏—Å–∞', '–û–ª–µ–≥', '–°–∏—Ä–∏'] // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –±–æ—Ç–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      };
      
      console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', results);
      setResults(results);

      // –î–æ–±–∞–≤–ª—è–µ–º 2-—Å–µ–∫—É–Ω–¥–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      setTimeout(() => {
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö
        const allPlayersData = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞
        allPlayersData.push({
          player: 'You',
          choice: results.playerChoice,
          reward: results.winner === 'You' ? results.reward : 0
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä—ã –±–æ—Ç–æ–≤
        results.botChoices.forEach((choice: number, index: number) => {
          const botName = results.botNames[index];
          allPlayersData.push({
            player: botName,
            choice,
            reward: results.winner === botName ? results.reward : 0
          });
        });
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞–≥—Ä–∞–¥—ã (–æ—Ç 0 –¥–æ 100)
        allPlayersData.sort((a, b) => {
          if (a.reward !== b.reward) {
            // –ï—Å–ª–∏ –Ω–∞–≥—Ä–∞–¥—ã —Ä–∞–∑–Ω—ã–µ, —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–≥–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
            return a.reward - b.reward;
          } else {
            // –ï—Å–ª–∏ –Ω–∞–≥—Ä–∞–¥—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —Å–Ω–∞—á–∞–ª–∞ –∏–≥—Ä–æ–∫, –ø–æ—Ç–æ–º –±–æ—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
            if (a.player === 'You') return -1;
            if (b.player === 'You') return 1;
            return results.botNames.indexOf(a.player) - results.botNames.indexOf(b.player);
          }
        });
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –∏–º–µ–Ω–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        const sortedPlayerNames = allPlayersData.map(p => p.player);
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        const showNextPlayer = (index: number) => {
          if (index < sortedPlayerNames.length) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∏ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö
            setVisiblePlayers(sortedPlayerNames.slice(0, index + 1));
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–≥—Ä–æ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫–∞ –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º
            if (index === sortedPlayerNames.length - 1) {
              setBankUpdateVisible(true);
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
              showNextPlayer(index + 1);
            }, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏
          } else {
            // –í—Å–µ –∏–≥—Ä–æ–∫–∏ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫–∞ —É–∂–µ –≤–∏–¥–∏–º–æ
            // –ù–∏—á–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
          }
        };
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        showNextPlayer(0);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–Ω–∫, –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–æ–≤ –∏ —Å–µ—Ä–∏—é –ø–æ–±–µ–¥
        updateBankAndGold(winner, determinedReward);
        updateWinStreaks(winner);
        
        setLoading(false);
      }, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ–∫–∞–∑–∞
      
      console.log('–§—É–Ω–∫—Ü–∏—è finishRound –∑–∞–≤–µ—Ä—à–∏–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –æ–∂–∏–¥–∞–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–æ –Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—É–Ω–¥–∞:", error);
      setError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      setLoading(false);
    }
  };

  const startNewRound = () => {
    setGameActive(true);
    setResults(null);
    setError(null);
    setPlayerChoice(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ prevBankValue —Ç–µ–∫—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –±–∞–Ω–∫–∞
    setPrevBankValue(bank);
    
    // –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è —É –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    setTotalGold(prev => ({
      'You': prev['You'] - GAME_COST,
      '–ê–ª–∏—Å–∞': prev['–ê–ª–∏—Å–∞'] - GAME_COST,
      '–û–ª–µ–≥': prev['–û–ª–µ–≥'] - GAME_COST,
      '–°–∏—Ä–∏': prev['–°–∏—Ä–∏'] - GAME_COST
    }));
    
    setTimeLeft(7); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 7 —Å–µ–∫—É–Ω–¥
    setResultsReady(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    setBankUpdateVisible(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–∞
    setBankJackpot(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∂–µ–∫–ø–æ—Ç–µ
    
    setPlayersMadeChoice({
      'You': false,
      '–ê–ª–∏—Å–∞': false,
      '–û–ª–µ–≥': false,
      '–°–∏—Ä–∏': false
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–Ω–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
    setLastBankAddition(null);
    
    console.log("–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥");
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const showResultsSequentially = (results: any) => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∏–º—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    setVisiblePlayers([]);
    setBankUpdateVisible(false);

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö
    const allPlayersData = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞
    allPlayersData.push({
      player: 'You',
      choice: results.playerChoice,
      reward: results.winner === 'You' ? results.reward : 0
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä—ã –±–æ—Ç–æ–≤
    results.botChoices.forEach((choice: number, index: number) => {
      const botName = results.botNames[index];
      allPlayersData.push({
        player: botName,
        choice,
        reward: results.winner === botName ? results.reward : 0
      });
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞–≥—Ä–∞–¥—ã (–æ—Ç 0 –¥–æ 100)
    allPlayersData.sort((a, b) => {
      if (a.reward !== b.reward) {
        // –ï—Å–ª–∏ –Ω–∞–≥—Ä–∞–¥—ã —Ä–∞–∑–Ω—ã–µ, —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–≥–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
        return a.reward - b.reward;
      } else {
        // –ï—Å–ª–∏ –Ω–∞–≥—Ä–∞–¥—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —Å–Ω–∞—á–∞–ª–∞ –∏–≥—Ä–æ–∫, –ø–æ—Ç–æ–º –±–æ—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
        if (a.player === 'You') return -1;
        if (b.player === 'You') return 1;
        return results.botNames.indexOf(a.player) - results.botNames.indexOf(b.player);
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç 0 –¥–æ 100
    console.log('–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –ø–æ –Ω–∞–≥—Ä–∞–¥–µ (–æ—Ç 0 –¥–æ 100):', allPlayersData);
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –∏–º–µ–Ω–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const sortedPlayerNames = allPlayersData.map(p => p.player);
  };

  return (
    <Router>
      <Routes>
        <Route path="/" element={<WelcomePage />} />
        <Route path="/trading" element={<TradingPage />} />
        <Route path="/game" element={
          <div className="App">
            <div className="min-h-screen bg-gradient-to-br from-indigo-900 to-purple-900 flex flex-col items-center justify-center p-4">
              <div className="bg-white rounded-xl shadow-2xl max-w-4xl w-full overflow-hidden p-6">
                <div className="bg-gradient-to-r from-amber-500 to-yellow-500 p-6">
                  <div className="flex items-center justify-center">
                    <Treasure className="h-10 w-10 text-yellow-100 mr-3" />
                     <h1 className="text-xl md:text-3xl font-bold text-white whitespace-nowrap">–û—Ö–æ—Ç–∞ –∑–∞ —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏</h1>
                     {/* üåü –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–¥ –∏–≥—Ä–æ–≤—ã–º –ø–æ–ª–µ–º */}
                  </div>
                </div>
                
                {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–µ—Ä—Å–∏–π –∏–≥—Ä—ã */}
                <div className="flex justify-center mt-4 mb-4">
                  <button 
                    className={`px-4 py-2 ${gameVersion === 'original' ? 'bg-blue-600 text-white' : 'bg-gray-200'} rounded-l-lg`}
                    onClick={() => setGameVersion('original')}
                  >
                    –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞
                  </button>
                  <button 
                    className={`px-4 py-2 ${gameVersion === 'bank' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
                    onClick={() => setGameVersion('bank')}
                  >
                    –ò–≥—Ä–∞ —Å –ë–ê–ù–ö–û–ú
                  </button>
                  <button 
                    className={`px-4 py-2 ${gameVersion === 'three-players' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
                    onClick={() => setGameVersion('three-players')}
                  >
                    3 –∏–≥—Ä–æ–∫–∞ / 3 —Å—É–Ω–¥—É–∫–∞
                  </button>
                  <button 
                    className={`px-4 py-2 ${gameVersion === 'multiplayer' ? 'bg-blue-600 text-white' : 'bg-gray-200'} rounded-r-lg`}
                    onClick={() => setGameVersion('multiplayer')}
                  >
                    –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä
                  </button>
                </div>
                
                {gameVersion === 'original' ? (
                  <>
                    {/* –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–≥—Ä—ã */}
                    <div className="game-container">
                      {/* üéØ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –¥–æ—Å–∫–∞ */}
                      <GameBoard2 
                        onChestSelect={handleChestSelect} 
                        loading={loading} 
                        gameActive={gameActive} 
                        selectedChest={playerChoice}
                        playersMadeChoice={playersMadeChoice}
                        resultsReady={resultsReady}
                      />
                      
                      {/* –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Players */}
                      <div className="players-wrapper">
                        <Players 
                          results={results} 
                          timeLeft={timeLeft} 
                          gameActive={gameActive} 
                          playersMadeChoice={playersMadeChoice}
                          setPlayersMadeChoice={setPlayersMadeChoice}
                          visiblePlayers={visiblePlayers}
                        />
                      </div>
                    </div>
                    
                    {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞" —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≤–∏–¥–Ω—ã - —Ä–∞–∑–º–µ—â–∞–µ–º –Ω–∞–¥ –±–∞–Ω–∫–æ–º */}
                    {results && visiblePlayers.length === 4 && (
                      <div className="flex justify-center mt-4 mb-4">
                        <button 
                        className="px-5 py-3 bg-blue-500 text-white text-lg font-bold rounded-lg shadow-md hover:bg-blue-700 transition"
                        onClick={startNewRound}
                        >
                        üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
                        </button>
                      </div>
                    )}
                    
                    {/* üåü –ë–∞–Ω–∫ */}
                    <div className="mt-6 p-4 bg-gray-100 rounded-lg shadow-md text-center">
                      <h2 className="text-lg font-bold">
                        üè¶ –ë–∞–Ω–∫: {prevBankValue} –º–æ–Ω–µ—Ç
                        {lastBankAddition !== null && lastBankAddition > 0 && visiblePlayers.length === 4 && !bankJackpot && (
                          <span className="text-green-600"> +{lastBankAddition} –º–æ–Ω–µ—Ç</span>
                        )}
                      </h2>
                      {bank >= BANK_THRESHOLD && !bankJackpot && <p className="text-red-500 font-semibold">üî• –ë–∞–Ω–∫ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—ã–∏–≥—Ä–∞—Ç—å!</p>}
                      {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ä—ã–≤–µ –±–∞–Ω–∫–∞ */}
                      {bankJackpot && (
                        <p className="text-red-500 font-bold text-lg jackpot-text">
                          üî•üî•üî• {bankJackpot.player === 'You' ? '–í—ã —Å–æ—Ä–≤–∞–ª–∏' : `${bankJackpot.player} —Å–æ—Ä–≤–∞–ª${bankJackpot.player === '–ê–ª–∏—Å–∞' ? '–∞' : ''}`} –±–∞–Ω–∫ +{bankJackpot.amount} –º–æ–Ω–µ—Ç üî•üî•üî•
                        </p>
                      )}
                    </div>

                    {/* üåü –û–±—â–∏–π —Å—á—ë—Ç + —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ (–∫–∞–∫ –±—ã–ª–æ) */}
                    <div className="mt-6 p-6 bg-gray-100 rounded-lg shadow-md grid grid-cols-1 md:grid-cols-2 gap-4">
                      {/* –û–±—â–∏–π —Å—á—ë—Ç (—Å–ª–µ–≤–∞) */}
                      <div className="text-center">
                        <h2 className="text-lg font-bold mb-2">üí∞ –û–±—â–∏–π —Å—á—ë—Ç</h2>

                        <ul className="text-sm text-gray-700">
                          {Object.entries(totalGold)
                            .filter(([player]) => ["You", "–ê–ª–∏—Å–∞", "–û–ª–µ–≥", "–°–∏—Ä–∏"].includes(player))
                            .map(([player, gold]) => (
                            <li key={player} className={`py-1 ${gold < 0 ? "text-red-500" : ""}`}>
                            {player}: {gold} –º–æ–Ω–µ—Ç{" "}
                            {winStreak[player] >= 3 ? "üî•üî•üî•" : winStreak[player] === 2 ? "üî•üî•" : bank >= BANK_THRESHOLD ? `(üî• ${winStreak[player]} –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥)` : ""}
                            </li>
                          ))}
                        </ul>
                        
                      </div>

                      {/* –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ (—Å–ø—Ä–∞–≤–∞) */}
                      {results && (
                        <div className="text-center">
                          <h2 className="text-lg font-bold mb-2">üé≤ –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥</h2>
                          
                          {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–∫–∞ –Ω–µ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≤–∏–¥–Ω—ã */}
                          {visiblePlayers.length < 4 ? (
                            <p className="text-lg font-semibold">üìä –°–º–æ—Ç—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...</p>
                          ) : (
                            <p className="text-lg font-semibold">
                              {results.winner !== "No winner" ? `üèÜ ${results.winner} –≤—ã–∏–≥—Ä–∞–ª ${results.reward} –º–æ–Ω–µ—Ç!` : "–ù–∏–∫—Ç–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª."}
                            </p>
                          )}
                          
                          <ul className="text-sm text-gray-700 mt-2">
                            <li className="font-semibold">üßë –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—É–Ω–¥—É–∫ {results.playerChoice}</li>
                            {results.botChoices.map((choice: number, index: number) => (
                              <li key={index}>ü§ñ {results.botNames[index]} –≤—ã–±—Ä–∞–ª{results.botNames[index] === '–ê–ª–∏—Å–∞' ? '–∞' : ''} —Å—É–Ω–¥—É–∫ {choice}</li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </div>

                    {/* üåü –û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã (—Ç–µ–ø–µ—Ä—å –≤–Ω–∏–∑—É) */}
                    <div className="mt-6 p-6 bg-gray-100 rounded-lg shadow-md">
                      <h2 className="text-xl font-bold text-center mb-2">–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</h2>
                      <ul className="text-sm space-y-1 text-gray-700">
                        <li>‚Ä¢ –í—ã –∏–≥—Ä–∞–µ—Ç–µ –ø—Ä–æ—Ç–∏–≤ 3 –±–æ—Ç–æ–≤</li>
                        <li>‚Ä¢ –í –∫–∞–∂–¥–æ–º —Å—É–Ω–¥—É–∫–µ —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞: 35, 50, 70 –∏–ª–∏ 100 –º–æ–Ω–µ—Ç</li>
                        <li>‚Ä¢ –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–º—ã–π —Ü–µ–Ω–Ω—ã–π —Å—É–Ω–¥—É–∫, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–æ–ª–æ—Ç–æ</li>
                        <li>‚Ä¢ –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –≤—ã–±—Ä–∞–ª–∏ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Å—É–Ω–¥—É–∫, –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –∑–æ–ª–æ—Ç–æ</li>
                        <li className="font-semibold">‚Ä¢ üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –≤ —Ä–∞—É–Ω–¥–µ: {GAME_COST} –º–æ–Ω–µ—Ç</li>
                        <li>‚Ä¢ üè¶ <span className="font-semibold">–ë–∞–Ω–∫</span>: –Ω–µ—Ä–∞–∑—ã–≥—Ä–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –ø–æ–ø–∞–¥–∞—é—Ç –≤ –±–∞–Ω–∫</li>
                        <li>‚Ä¢ üî• –ö–æ–≥–¥–∞ –≤ –±–∞–Ω–∫–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è {BANK_THRESHOLD} –º–æ–Ω–µ—Ç, –µ–≥–æ –º–æ–∂–Ω–æ –≤—ã–∏–≥—Ä–∞—Ç—å</li>
                        <li>‚Ä¢ üèÜ –ß—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –±–∞–Ω–∫, –Ω—É–∂–Ω–æ <span className="font-semibold">–≤—ã–∏–≥—Ä–∞—Ç—å 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥</span></li>
                      </ul>
                    </div>
                  </>
                ) : gameVersion === 'bank' ? (
                  <BankGame />
                ) : gameVersion === 'three-players' ? (
                  <ThreePlayersGame />
                ) : (
                  <MultiplayerGame />
                )}
              </div>
            </div>
          </div>
        } />
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
    </Router>
  );
}

export default App;
